/* This neopixelLcdCountDown programm creates a time log after the user used buttons set time and start and stop the timer. 
The time is counting down on a LCD screen and is made visual with a led ring. 

The microprocessor is a Adafruit Feather 32u4 Adalogger 
see also https://blog.adafruit.com/2015/11/11/new-product-adafruit-feather-32u4-adalogger/

The LCD we used is a LCD Display 16*2 characters with white text and blue backlight:  
see also http://www.tinytronics.nl/shop/nl/display/lcd-display-16*2-karakters-met-witte-tekst-en-blauwe-backlight?search=lcd
    Adalogger Analoog  0  Buttons 
    9         Digitaal 4  DB4     
    10        Digitaal 5  DB5     
    11        Digitaal 6  DB6     
    12        Digitaal 7  DB7     
    6         Digitaal 8  RS (Data of signaal selectie beeldscherm)
    5         Digitaal 9  Enable
    n/a       Digitaal 10 Backlight controle

For RTC we used RTC DS1307 met AT24C32 eeprom incl. Batterij
see also http://www.tinytronics.nl/shop/nl/diversen/tijd/rtc-ds1307-met-at24c32-eeprom-incl.-batterij?search=rtc

The led lights use pin: 13 
*/

// INCLUDES:
// *****************
// Date and time functions using a DS1307 RTC connected via I2C and Wire lib
#include <Wire.h>
#include "RTClib.h"
#include <SPI.h>
#include <SD.h>
#include <LiquidCrystal.h> //for LCD
#include <Adafruit_NeoPixel.h> //for LED

// DEFINITIONS:
//*****************
File myFile;
RTC_DS1307 rtc;
  
// Setup variable for SD adalogger
#define cardSelect 4 //for Adalogger
//#define cardSelect 10 //for UNO with shields
int logFile = "datalog3.txt";

// Setup variable for timer
int hours = 0; // start hours
int minutes = 1; //start min
int seconds = 0; //start seconds
boolean stopState = 0;
boolean startState = 0;
boolean startLog = 0;
boolean contTimer = 0;
boolean resetState = 0;
int buttonDelay = 500;
unsigned long previousMillis = 0;
int setMinutes; // variable to store the minutes set by the user for countdown
int secondsCont = 0;

//LiquidCrystal lcd(8, 9, 4, 5, 6, 7);      // for UNO whith LCD shield
LiquidCrystal lcd(6, 5, 9, 10, 11, 12);     // for adalogger 

// define some values used by the panel and buttons
int lcd_key     = 0;
int adc_key_in  = 0;

#define btnRIGHT  0
#define btnUP     1
#define btnDOWN   2
#define btnLEFT   3
#define btnSELECT 4
#define btnNONE   5

int read_LCD_buttons(){               // read the buttons
    adc_key_in = analogRead(0);       // read the value from the sensor 
    // values from hardware with adalogger
     if (adc_key_in > 1000) return btnNONE;    
     if (adc_key_in > 915)  return btnLEFT;     // stop blue-wire
     if (adc_key_in > 840)  return btnUP;       // up-reset yellow-wire
     if (adc_key_in > 770)  return btnDOWN;     // down-reset green-wire
     if (adc_key_in > 720)  return btnRIGHT;    // start black-wire
     if (adc_key_in < 500)  return btnNONE;   

     // values from hardware Arduino LCD keypad shield
//     if (adc_key_in > 1000) return btnNONE;    
//     if (adc_key_in < 50)   return btnRIGHT;  
//     if (adc_key_in < 195)  return btnUP; 
//     if (adc_key_in < 380)  return btnDOWN; 
//     if (adc_key_in < 555)  return btnLEFT; 
//     if (adc_key_in < 790)  return btnSELECT;  
    return btnNONE;                // when all others fail, return this.
}

// define variables for LED circle
#define PIN            13
#define NUMPIXELS      12
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
int pixelCount = 0;
int pixelDivided;
uint32_t pixelColor;

void setup(){
// Setup Serial communication  
  while (!Serial); // for Leonardo/Micro/Zero
  Serial.begin(57600);

// Setup RTC
  //Serial.print("Initializing RTC...");
  Serial.begin(57600);
  if (! rtc.begin()) {
  Serial.println("Couldn't find RTC");
  }  
  if (! rtc.isrunning()) {
  Serial.println("RTC is NOT running!");
  } 
  if (!SD.begin(cardSelect)) {
  Serial.println("Initialization SD failed!");
  }

// Create file for logging
  myFile = SD.open(logFile, FILE_WRITE);
  Serial.println("Writing to Interactor Logfile...");
  if (myFile) {
    myFile.println("Start Logging sequence: ");
    dateprint();
    myFile.close();
  } else {
    Serial.println("error opening datalog3.txt");
  }
  showStart();
}

void loop(){
   lcd.setCursor(0,0);             // move to the begining of the first line
   lcd_key = read_LCD_buttons();   // read the buttons
   switch (lcd_key){               // depending on which button was pushed, we perform an action
// the methodes in btnNONE will be valid continuously and be activated by using the buttons which changes the states of some variables  
       case btnNONE:{
            timer();
            break;
       }
       case btnRIGHT:{  
       // btnRIGHT changes values of some varibles (states) so it will initiate parts of the methodes in btnNONE to start the timer           
            lcd.print("START          ");
            startState = 1;
            stopState = 0;
            startLog = 1;
            resetState = 0;
            delay(buttonDelay);
            break;
       }
       case btnLEFT:{
       // btnLEFT changes values of some varibles (states) so it will initiate parts of the methodes in btnNONE to stop the timer          
            stopState = 1;
            startState = 0;
            delay(buttonDelay);
            break;
       }    
       case btnUP:{
           lcd.setCursor(0,0);
           lcd.print("Tijd instellen");  
           lcd.print("                ");
           minutes++;
           showTime();
           delay(buttonDelay);  
           break;
       }
       case btnDOWN:{
           lcd.setCursor(0,0);
           lcd.print("Tijd instellen");  
           lcd.print("                ");
           minutes--;
           showTime();
           delay(buttonDelay);
           break;
       }
       case btnSELECT:{
             lcd.print("CHECKLOG        ");  //  push button "SELECT" and show the word on the screen
             checklog();
             break;
       }
   }
}

void dateprint() {
//Create current time label and print it to the SD card
    DateTime now = rtc.now();
    myFile.print(now.year(), DEC);
    myFile.print('/');
    myFile.print(now.month(), DEC);
    myFile.print('/');
    myFile.print(now.day(), DEC);
    myFile.print(" ");
    myFile.print(now.hour(), DEC);
    myFile.print(':');
    myFile.print(now.minute(), DEC);
    myFile.print(':');
    myFile.print(now.second(), DEC);
    myFile.println();
}

void timer() { 
    if (stopState == 0 && startState == 1 && startLog == 1) {
      setMinutes = minutes;
      Serial.print("Minutes set on: ");
      Serial.println(setMinutes);
      secondsCont = setMinutes * 60;
      Serial.print("Total seconds set on: ");
      Serial.println(secondsCont);
      pixelDivided = secondsCont / 12;
      Serial.print("pixelDivided: ");
      Serial.println(pixelDivided);
      myFile = SD.open(logFile, FILE_WRITE);
        if (myFile) {
          myFile.print("Counter time set: ");
          logCounter();
          myFile.print("Time start: ");
          dateprint();
          myFile.close();
        } 
      startLog = 0;
    }
   
    if (stopState == 0 && startState == 1 && startLog == 0 && contTimer == 0) {
      stepDown();
    }

    if (stopState == 0 && startState == 1 && startLog == 0 && contTimer == 1) {
      stepUp();
    }

    if (stopState == 1 && startState == 0 && resetState == 0) {
      stopTimer();
    }

    if (stopState == 1 && startState == 0 && resetState == 1) {
      reset();
    }
  }

void stepUp() { 
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= 1000){
    previousMillis = currentMillis;   
        lcd.setCursor(0,1);
        lcd.print("-");
        showTime();
        secondsCont -= 1;
        if (secondsCont %25 == 0 ) {
          pixelCount += 1;
        }
        if (seconds <= 59) {
          seconds += 1;
        } else {
        if (seconds > 59) {
          seconds = 00;
          minutes += 1;
        }
      }  }
}

void stepDown() {
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= 1000){
    previousMillis = currentMillis; 
    showTime();
    secondsCont -=1;
      if (seconds %pixelDivided == 0 ) {
          pixelCount += 1;
        }
      if (minutes == 0 && seconds == 0){
        contTimer = 1;
      } 
      if (seconds > 0) {
        seconds -= 1;
      } else {
        if (minutes > 0) {
          seconds = 59;
          minutes -= 1;
        }     
      }
  }          
}

void stopTimer(){
// this method stop the countdown timer when the stop button is activated 
// and will log the ellapsed time after start (also when allready past the set time)
// and will log the real time of the moment the stop button is activated
    lcd.print("GESTOPT             ");
//    myFile.close(); // in case of interuption START... data is saved
    myFile = SD.open("datalog.txt", FILE_WRITE);
    if (myFile) {     // logging the ellapsed time after Start was initiated by the user, to the SD file
      myFile.print("Extra caretime after countdown: ");
      logCounter();
      myFile.print("Time stop: ");
      dateprint();
      myFile.print("Continous second countdown from set time: ");
      myFile.print(secondsCont);
      myFile.println(" seconds");
      myFile.close();
    } else {
      // if the file didn't open, print an error:
      Serial.println("error STOP opening datalog.txt");
    }
    // Print to lcd to reset the Interactor
     lcd.setCursor(0,1);              
     lcd.print("Klik op reset"); 
  stopState = 0;
  resetState = 1;
}

void checklog(){ // re-open the file for reading and check during programming:
  myFile = SD.open("datalog.txt");
  if (myFile) {
    Serial.println("datalog.txt:"); 
    while (myFile.available()) { // read from the file until there's nothing else in it:
      Serial.write(myFile.read());
    }
    myFile.close();
  }
}

void reset(){
// reset the variables of the timer for new sequence
        myFile = SD.open(logFile, FILE_WRITE);
          if (myFile) {
            myFile.print("Time reset: ");
            dateprint();
            myFile.println();
            myFile.close();
          } 
          hours = 0;
          minutes = 1;
          seconds = 0;
          stopState = 0;
          secondsCont = 0;
          pixelCount = 0;
          showStart();
          resetState = 0;
}

void showStart(){
// method to (re)start the timer, LCD and neoPixel for new sequence
   lcd.begin(16, 2);               
   lcd.setCursor(0,0);             
   lcd.print("Interactor v3.0");  
   lcd.setCursor(0,1);              
   lcd.print("GEREED"); 
   delay(3000);
   lcd.setCursor(0,0);              
   lcd.print("Tijd instellen          "); 
   lcd.setCursor(0,1);              
   lcd.print(" met UP en DOWN                  ");
    
   pixels.begin(); // This initializes the NeoPixel library.
   pixels.clear();
   pixels.show();
   
   showTime();
}

void logCounter() {
  (minutes < 10) ? myFile.print("0") : DEC;
  myFile.print(minutes);
  myFile.print(":");
  (seconds < 10) ? myFile.print("0") : DEC;
  myFile.print(seconds);
  myFile.println();
}

void showTime() {
  lcd.setCursor(1,1);
  (hours < 10 && hours > 0) ? lcd.print("0") : DEC;
  (hours > 0) ? lcd.print(hours) : DEC;
  (hours > 0) ? lcd.print(":") : DEC;
  (minutes < 10) ? lcd.print("0") : DEC;
  lcd.print(minutes);
  lcd.print(":");
  (seconds < 10) ? lcd.print("0") : DEC;
  lcd.print(seconds); 
  lcd.print("                 ");
  
  LED();
}

void LED() { 
  int secondPixelCount = pixelCount - 12;
  int thirdPixelCount = secondPixelCount - 12;
  int fourthPixelCount = thirdPixelCount - 12;
  int fifthPixelCount = fourthPixelCount - 12;
if (contTimer == 0){
  if (pixelCount < 3){
    pixelColor = pixels.Color(255,255,255);} //white
  else if (pixelCount < 5){
    pixelColor = pixels.Color(0,0,255);} // blue
  else if (pixelCount < 7){
    pixelColor = pixels.Color(11,247,7);} //green
  else if (pixelCount < 9){
    pixelColor = pixels.Color(255,255,0);} //yellow
  else if (pixelCount < 11){
    pixelColor = pixels.Color(255,165,0);} //orange
  else if (pixelCount < 12 ){
    pixelColor = pixels.Color(255,0,0);} //red 
  for (int i = 0; i < pixelCount; i++){ 
  pixels.setBrightness(10);
  pixels.setPixelColor(i,pixelColor); 
  pixels.show();  
  }
}

if (contTimer == 1){                      
    if (pixelCount < 12){  //white
      for (int i = 0; i < pixelCount; i++){ 
      pixels.setBrightness(5);
      pixels.setPixelColor(i,255,255,255); 
      pixels.show();}
    } else if (pixelCount < 24) {  //blue
      for (int i = 0; i < secondPixelCount; i++){
      pixelColor = pixels.Color(0,0,255); 
      pixels.setBrightness(10);
      pixels.setPixelColor(i,pixelColor); 
      pixels.show();}
    } else if (pixelCount < 36) {             //green
      pixelColor = pixels.Color(0,255,0);
      pixels.setBrightness(10); 
      pixels.setPixelColor(thirdPixelCount,pixelColor); 
      pixels.show();
    } else if (pixelCount < 48) {             //yellow
      pixelColor = pixels.Color(255,255, 0);
      pixels.setBrightness(10); 
      pixels.setPixelColor(fourthPixelCount,pixelColor); 
      pixels.show();
    } else if (pixelCount <= 60) {             //red
      pixelColor = pixels.Color(255, 0, 0);
      pixels.setBrightness(10); 
      pixels.setPixelColor(fifthPixelCount,pixelColor); 
      pixels.show();
    } else {
      pixelCount = -1;
  }
}
}
